{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/scripts/popup.js","src/scripts/utils/ext.js","src/scripts/utils/storage.js"],"names":[],"mappings":"AAAA;aCAA,kC;AACA,0C;;AAEA,IAAI,QAAQ,SAAS,cAAT,CAAwB,KAAxB,CAAZ;;AAEA,cAAI,IAAJ,CAAS,KAAT,CAAe,EAAC,QAAQ,IAAT,EAAe,eAAe,IAA9B,EAAf,EAAoD,UAAS,IAAT,EAAe;AACjE,MAAI,YAAY,KAAK,CAAL,CAAhB;AACA,SAAO,IAAP,CAAY,WAAZ,CAAwB,UAAU,EAAlC,EAAsC,EAAE,QAAQ,cAAV,EAAtC,EAAkE,cAAlE;AACD,CAHD;;AAKA,IAAI,iBAAiB,SAAjB,cAAiB,GAAM;AACzB,MAAI,mBAAmB,SAAS,cAAT,CAAwB,mBAAxB,CAAvB;AACA,mBAAiB,SAAjB;AACD,CAHD;;;aCVA,IAAM,OAAO;AACX,QADW;AAEX,WAFW;AAGX,eAHW;AAIX,UAJW;AAKX,cALW;AAMX,SANW;AAOX,WAPW;AAQX,QARW;AASX,WATW;AAUX,gBAVW;AAWX,SAXW;AAYX,MAZW;AAaX,MAbW;AAcX,eAdW;AAeX,YAfW;AAgBX,SAhBW;AAiBX,SAjBW;AAkBX,MAlBW;AAmBX,eAnBW;AAoBX,YApBW;AAqBX,SArBW,CAAb;;;AAwBA,SAAS,SAAT,GAAsB;AACpB,MAAM,QAAQ,IAAd;;AAEA,OAAK,OAAL,CAAa,UAAU,GAAV,EAAe;;AAE1B,UAAM,GAAN,IAAa,IAAb;;AAEA,QAAI;AACF,UAAI,OAAO,GAAP,CAAJ,EAAiB;AACf,cAAM,GAAN,IAAa,OAAO,GAAP,CAAb;AACD;AACF,KAJD,CAIE,OAAO,CAAP,EAAU,CAAE;;AAEd,QAAI;AACF,UAAI,OAAO,GAAP,CAAJ,EAAiB;AACf,cAAM,GAAN,IAAa,OAAO,GAAP,CAAb;AACD;AACF,KAJD,CAIE,OAAO,CAAP,EAAU,CAAE;;AAEd,QAAI;AACF,UAAI,QAAQ,GAAR,CAAJ,EAAkB;AAChB,cAAM,GAAN,IAAa,QAAQ,GAAR,CAAb;AACD;AACF,KAJD,CAIE,OAAO,CAAP,EAAU,CAAE;AACd,QAAI;AACF,YAAM,GAAN,GAAY,QAAQ,SAAR,CAAkB,GAAlB,CAAZ;AACD,KAFD,CAEE,OAAO,CAAP,EAAU,CAAE;AACf,GAxBD;;AA0BA,MAAI;AACF,QAAI,WAAW,QAAQ,OAAvB,EAAgC;AAC9B,WAAK,OAAL,GAAe,QAAQ,OAAvB;AACD;AACF,GAJD,CAIE,OAAO,CAAP,EAAU,CAAE;;AAEd,MAAI;AACF,QAAI,WAAW,QAAQ,aAAvB,EAAsC;AACpC,WAAK,aAAL,GAAqB,QAAQ,aAA7B;AACD;AACF,GAJD,CAIE,OAAO,CAAP,EAAU,CAAE;;AAEf;;AAED,OAAO,OAAP,GAAiB,IAAI,SAAJ,EAAjB;;;aCnEA,4B;;AAEA,OAAO,OAAP,GAAkB,cAAI,OAAJ,CAAY,IAAZ,GAAmB,cAAI,OAAJ,CAAY,IAA/B,GAAsC,cAAI,OAAJ,CAAY,KAApE","file":"popup.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import ext from \"./utils/ext\";\nimport storage from \"./utils/storage\";\n\nvar popup = document.getElementById(\"app\");\n\next.tabs.query({active: true, currentWindow: true}, function(tabs) {\n  var activeTab = tabs[0];\n  chrome.tabs.sendMessage(activeTab.id, { action: 'process-page' }, renderGreeting);\n});\n\nvar renderGreeting = () => {\n  var displayContainer = document.getElementById(\"display-container\");\n  displayContainer.innerHTML = `<p class='message'>Enter a Crypto url in the search bar to view it</p>`;\n}\n\n","const apis = [\n  'alarms',\n  'bookmarks',\n  'browserAction',\n  'commands',\n  'contextMenus',\n  'cookies',\n  'downloads',\n  'events',\n  'extension',\n  'extensionTypes',\n  'history',\n  'i18n',\n  'idle',\n  'notifications',\n  'pageAction',\n  'runtime',\n  'storage',\n  'tabs',\n  'webNavigation',\n  'webRequest',\n  'windows',\n]\n\nfunction Extension () {\n  const _this = this\n\n  apis.forEach(function (api) {\n\n    _this[api] = null\n\n    try {\n      if (chrome[api]) {\n        _this[api] = chrome[api]\n      }\n    } catch (e) {}\n\n    try {\n      if (window[api]) {\n        _this[api] = window[api]\n      }\n    } catch (e) {}\n\n    try {\n      if (browser[api]) {\n        _this[api] = browser[api]\n      }\n    } catch (e) {}\n    try {\n      _this.api = browser.extension[api]\n    } catch (e) {}\n  })\n\n  try {\n    if (browser && browser.runtime) {\n      this.runtime = browser.runtime\n    }\n  } catch (e) {}\n\n  try {\n    if (browser && browser.browserAction) {\n      this.browserAction = browser.browserAction\n    }\n  } catch (e) {}\n\n}\n\nmodule.exports = new Extension();","import ext from \"./ext\";\n\nmodule.exports = (ext.storage.sync ? ext.storage.sync : ext.storage.local);"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvc2NyaXB0cy9wb3B1cC5qcyIsInNyYy9zY3JpcHRzL3V0aWxzL2V4dC5qcyIsInNyYy9zY3JpcHRzL3V0aWxzL3N0b3JhZ2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7YUNBQSxrQztBQUNBLDBDOztBQUVBLElBQUksUUFBUSxTQUFTLGNBQVQsQ0FBd0IsS0FBeEIsQ0FBWjs7QUFFQSxjQUFJLElBQUosQ0FBUyxLQUFULENBQWUsRUFBQyxRQUFRLElBQVQsRUFBZSxlQUFlLElBQTlCLEVBQWYsRUFBb0QsVUFBUyxJQUFULEVBQWU7QUFDakUsTUFBSSxZQUFZLEtBQUssQ0FBTCxDQUFoQjtBQUNBLFNBQU8sSUFBUCxDQUFZLFdBQVosQ0FBd0IsVUFBVSxFQUFsQyxFQUFzQyxFQUFFLFFBQVEsY0FBVixFQUF0QyxFQUFrRSxjQUFsRTtBQUNELENBSEQ7O0FBS0EsSUFBSSxpQkFBaUIsU0FBakIsY0FBaUIsR0FBTTtBQUN6QixNQUFJLG1CQUFtQixTQUFTLGNBQVQsQ0FBd0IsbUJBQXhCLENBQXZCO0FBQ0EsbUJBQWlCLFNBQWpCO0FBQ0QsQ0FIRDs7O2FDVkEsSUFBTSxPQUFPO0FBQ1gsUUFEVztBQUVYLFdBRlc7QUFHWCxlQUhXO0FBSVgsVUFKVztBQUtYLGNBTFc7QUFNWCxTQU5XO0FBT1gsV0FQVztBQVFYLFFBUlc7QUFTWCxXQVRXO0FBVVgsZ0JBVlc7QUFXWCxTQVhXO0FBWVgsTUFaVztBQWFYLE1BYlc7QUFjWCxlQWRXO0FBZVgsWUFmVztBQWdCWCxTQWhCVztBQWlCWCxTQWpCVztBQWtCWCxNQWxCVztBQW1CWCxlQW5CVztBQW9CWCxZQXBCVztBQXFCWCxTQXJCVyxDQUFiOzs7QUF3QkEsU0FBUyxTQUFULEdBQXNCO0FBQ3BCLE1BQU0sUUFBUSxJQUFkOztBQUVBLE9BQUssT0FBTCxDQUFhLFVBQVUsR0FBVixFQUFlOztBQUUxQixVQUFNLEdBQU4sSUFBYSxJQUFiOztBQUVBLFFBQUk7QUFDRixVQUFJLE9BQU8sR0FBUCxDQUFKLEVBQWlCO0FBQ2YsY0FBTSxHQUFOLElBQWEsT0FBTyxHQUFQLENBQWI7QUFDRDtBQUNGLEtBSkQsQ0FJRSxPQUFPLENBQVAsRUFBVSxDQUFFOztBQUVkLFFBQUk7QUFDRixVQUFJLE9BQU8sR0FBUCxDQUFKLEVBQWlCO0FBQ2YsY0FBTSxHQUFOLElBQWEsT0FBTyxHQUFQLENBQWI7QUFDRDtBQUNGLEtBSkQsQ0FJRSxPQUFPLENBQVAsRUFBVSxDQUFFOztBQUVkLFFBQUk7QUFDRixVQUFJLFFBQVEsR0FBUixDQUFKLEVBQWtCO0FBQ2hCLGNBQU0sR0FBTixJQUFhLFFBQVEsR0FBUixDQUFiO0FBQ0Q7QUFDRixLQUpELENBSUUsT0FBTyxDQUFQLEVBQVUsQ0FBRTtBQUNkLFFBQUk7QUFDRixZQUFNLEdBQU4sR0FBWSxRQUFRLFNBQVIsQ0FBa0IsR0FBbEIsQ0FBWjtBQUNELEtBRkQsQ0FFRSxPQUFPLENBQVAsRUFBVSxDQUFFO0FBQ2YsR0F4QkQ7O0FBMEJBLE1BQUk7QUFDRixRQUFJLFdBQVcsUUFBUSxPQUF2QixFQUFnQztBQUM5QixXQUFLLE9BQUwsR0FBZSxRQUFRLE9BQXZCO0FBQ0Q7QUFDRixHQUpELENBSUUsT0FBTyxDQUFQLEVBQVUsQ0FBRTs7QUFFZCxNQUFJO0FBQ0YsUUFBSSxXQUFXLFFBQVEsYUFBdkIsRUFBc0M7QUFDcEMsV0FBSyxhQUFMLEdBQXFCLFFBQVEsYUFBN0I7QUFDRDtBQUNGLEdBSkQsQ0FJRSxPQUFPLENBQVAsRUFBVSxDQUFFOztBQUVmOztBQUVELE9BQU8sT0FBUCxHQUFpQixJQUFJLFNBQUosRUFBakI7OzthQ25FQSw0Qjs7QUFFQSxPQUFPLE9BQVAsR0FBa0IsY0FBSSxPQUFKLENBQVksSUFBWixHQUFtQixjQUFJLE9BQUosQ0FBWSxJQUEvQixHQUFzQyxjQUFJLE9BQUosQ0FBWSxLQUFwRSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImltcG9ydCBleHQgZnJvbSBcIi4vdXRpbHMvZXh0XCI7XG5pbXBvcnQgc3RvcmFnZSBmcm9tIFwiLi91dGlscy9zdG9yYWdlXCI7XG5cbnZhciBwb3B1cCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXBwXCIpO1xuXG5leHQudGFicy5xdWVyeSh7YWN0aXZlOiB0cnVlLCBjdXJyZW50V2luZG93OiB0cnVlfSwgZnVuY3Rpb24odGFicykge1xuICB2YXIgYWN0aXZlVGFiID0gdGFic1swXTtcbiAgY2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UoYWN0aXZlVGFiLmlkLCB7IGFjdGlvbjogJ3Byb2Nlc3MtcGFnZScgfSwgcmVuZGVyR3JlZXRpbmcpO1xufSk7XG5cbnZhciByZW5kZXJHcmVldGluZyA9ICgpID0+IHtcbiAgdmFyIGRpc3BsYXlDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRpc3BsYXktY29udGFpbmVyXCIpO1xuICBkaXNwbGF5Q29udGFpbmVyLmlubmVySFRNTCA9IGA8cCBjbGFzcz0nbWVzc2FnZSc+RW50ZXIgYSBDcnlwdG8gdXJsIGluIHRoZSBzZWFyY2ggYmFyIHRvIHZpZXcgaXQ8L3A+YDtcbn1cblxuIiwiY29uc3QgYXBpcyA9IFtcbiAgJ2FsYXJtcycsXG4gICdib29rbWFya3MnLFxuICAnYnJvd3NlckFjdGlvbicsXG4gICdjb21tYW5kcycsXG4gICdjb250ZXh0TWVudXMnLFxuICAnY29va2llcycsXG4gICdkb3dubG9hZHMnLFxuICAnZXZlbnRzJyxcbiAgJ2V4dGVuc2lvbicsXG4gICdleHRlbnNpb25UeXBlcycsXG4gICdoaXN0b3J5JyxcbiAgJ2kxOG4nLFxuICAnaWRsZScsXG4gICdub3RpZmljYXRpb25zJyxcbiAgJ3BhZ2VBY3Rpb24nLFxuICAncnVudGltZScsXG4gICdzdG9yYWdlJyxcbiAgJ3RhYnMnLFxuICAnd2ViTmF2aWdhdGlvbicsXG4gICd3ZWJSZXF1ZXN0JyxcbiAgJ3dpbmRvd3MnLFxuXVxuXG5mdW5jdGlvbiBFeHRlbnNpb24gKCkge1xuICBjb25zdCBfdGhpcyA9IHRoaXNcblxuICBhcGlzLmZvckVhY2goZnVuY3Rpb24gKGFwaSkge1xuXG4gICAgX3RoaXNbYXBpXSA9IG51bGxcblxuICAgIHRyeSB7XG4gICAgICBpZiAoY2hyb21lW2FwaV0pIHtcbiAgICAgICAgX3RoaXNbYXBpXSA9IGNocm9tZVthcGldXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIHRyeSB7XG4gICAgICBpZiAod2luZG93W2FwaV0pIHtcbiAgICAgICAgX3RoaXNbYXBpXSA9IHdpbmRvd1thcGldXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIHRyeSB7XG4gICAgICBpZiAoYnJvd3NlclthcGldKSB7XG4gICAgICAgIF90aGlzW2FwaV0gPSBicm93c2VyW2FwaV1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICBfdGhpcy5hcGkgPSBicm93c2VyLmV4dGVuc2lvblthcGldXG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSlcblxuICB0cnkge1xuICAgIGlmIChicm93c2VyICYmIGJyb3dzZXIucnVudGltZSkge1xuICAgICAgdGhpcy5ydW50aW1lID0gYnJvd3Nlci5ydW50aW1lXG4gICAgfVxuICB9IGNhdGNoIChlKSB7fVxuXG4gIHRyeSB7XG4gICAgaWYgKGJyb3dzZXIgJiYgYnJvd3Nlci5icm93c2VyQWN0aW9uKSB7XG4gICAgICB0aGlzLmJyb3dzZXJBY3Rpb24gPSBicm93c2VyLmJyb3dzZXJBY3Rpb25cbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgRXh0ZW5zaW9uKCk7IiwiaW1wb3J0IGV4dCBmcm9tIFwiLi9leHRcIjtcblxubW9kdWxlLmV4cG9ydHMgPSAoZXh0LnN0b3JhZ2Uuc3luYyA/IGV4dC5zdG9yYWdlLnN5bmMgOiBleHQuc3RvcmFnZS5sb2NhbCk7Il19"}